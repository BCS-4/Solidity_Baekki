// SPDX-License-Identifier: GPL-3.0

pragma solidity ^0.8.0;

contract ABI1 {
    function getBytes(string memory _s) public pure returns(bytes memory) {
        return bytes(_s);
    }
    // abc 결과 값 : 0x616263

    function getABIEncode(string memory _s) public pure returns(bytes memory) {
        return abi.encode(_s);
    }

    /*
    abc 결과 값
    0x
    0000000000000000000000000000000000000000000000000000000000000020
    0000000000000000000000000000000000000000000000000000000000000003    // 길이(글자수)
    6162630000000000000000000000000000000000000000000000000000000000    // 데이터
    
    abced 결과 값
    0x
    0000000000000000000000000000000000000000000000000000000000000020
    0000000000000000000000000000000000000000000000000000000000000005    // 길이(글자수)
    6162636465000000000000000000000000000000000000000000000000000000    // 데이터

    abcdabcdabcdabcd 결과 값
    0x
    0000000000000000000000000000000000000000000000000000000000000020
    0000000000000000000000000000000000000000000000000000000000000010
    6162636461626364616263646162636400000000000000000000000000000000

    abcdabcdabcdabcdabcdabcdabcdabcd 결과 값 (32자리)

    0x
    0000000000000000000000000000000000000000000000000000000000000020
    0000000000000000000000000000000000000000000000000000000000000020
    6162636461626364616263646162636461626364616263646162636461626364

    abcdabcdabcdabcdabcdabcdabcdabcda 결과 값 (33자리)
    0x
    0000000000000000000000000000000000000000000000000000000000000020
    0000000000000000000000000000000000000000000000000000000000000021
    6162636461626364616263646162636461626364616263646162636461626364
    6100000000000000000000000000000000000000000000000000000000000000
    */

    function getABIEncode2(uint _n, string memory _s) public pure returns(bytes memory) {
        return abi.encode(_n, _s);
    }
    /*
    [32, abc] 결과 값
    0x
    0000000000000000000000000000000000000000000000000000000000000020    // 16진수 20 => 10진수 32(uint)
    0000000000000000000000000000000000000000000000000000000000000040    // abc 시작 위치
    0000000000000000000000000000000000000000000000000000000000000003    // abc length
    6162630000000000000000000000000000000000000000000000000000000000    // abc

    [64, abc] 결과 값
    0x
    0000000000000000000000000000000000000000000000000000000000000040    // 16진수 40 => 10진수 64(uint)
    0000000000000000000000000000000000000000000000000000000000000040    // abc 시작 위치
    0000000000000000000000000000000000000000000000000000000000000003    // abc length
    6162630000000000000000000000000000000000000000000000000000000000    // abc
    */

    function getABIEncodePacked(string memory _s) public pure returns(bytes memory) {
        return abi.encodePacked(_s);
    }
    /*
    abc 결과 값
    0x616263

    abcdabcdabcdabcdabcdabcdabcdabcda 결과 값 (33자리)
    0x616263646162636461626364616263646162636461626364616263646162636461
    */
}


contract ABI2 {
    function getABIEncode(uint[] memory _s) public pure returns(bytes memory) {
        return abi.encode(_s);
    }
    /* 
    [1,2,3] 결과 값
    0x
    0000000000000000000000000000000000000000000000000000000000000020
    0000000000000000000000000000000000000000000000000000000000000003
    0000000000000000000000000000000000000000000000000000000000000001
    0000000000000000000000000000000000000000000000000000000000000002
    0000000000000000000000000000000000000000000000000000000000000003
    */

    function getABIEncodePacked(uint[] memory _s) public pure returns(bytes memory) {
        return abi.encodePacked(_s);
    }
    /*
    [1,2,3] 결과 값
    0x
    0000000000000000000000000000000000000000000000000000000000000001
    0000000000000000000000000000000000000000000000000000000000000002
    0000000000000000000000000000000000000000000000000000000000000003
    */


    function getABIEncode_s(string[] memory _s) public pure returns(bytes memory) {
        return abi.encode(_s);
    }
    /*
    ["a","b","c"] 결과 값
    0x
    0000000000000000000000000000000000000000000000000000000000000020
    0000000000000000000000000000000000000000000000000000000000000003    // array 길이
    0000000000000000000000000000000000000000000000000000000000000060    // 16진수 60 => 10진수 96 (64 씩 차이남. 32byte)
    00000000000000000000000000000000000000000000000000000000000000a0    // 16진수 a0 => 10진수 160
    00000000000000000000000000000000000000000000000000000000000000e0    // 16진수 e0 => 10진수 224

    0000000000000000000000000000000000000000000000000000000000000001    // 길이 한 자리
    6100000000000000000000000000000000000000000000000000000000000000    // a
    0000000000000000000000000000000000000000000000000000000000000001    // 길이 한 자리
    6200000000000000000000000000000000000000000000000000000000000000    // b
    0000000000000000000000000000000000000000000000000000000000000001    // 길이 한 자리
    6300000000000000000000000000000000000000000000000000000000000000    // c

    ["ab","cd","ef"] 결과 값
    0x
    0000000000000000000000000000000000000000000000000000000000000020
    0000000000000000000000000000000000000000000000000000000000000003    // array 길이
    0000000000000000000000000000000000000000000000000000000000000060    // 16진수 60 => 10진수 96 (64 씩 차이남. 32byte)
    00000000000000000000000000000000000000000000000000000000000000a0    // 16진수 a0 => 10진수 160
    00000000000000000000000000000000000000000000000000000000000000e0    // 16진수 e0 => 10진수 224

    0000000000000000000000000000000000000000000000000000000000000002    // 길이 두 자리
    6162000000000000000000000000000000000000000000000000000000000000    // ab
    0000000000000000000000000000000000000000000000000000000000000002    // 길이 두 자리
    6364000000000000000000000000000000000000000000000000000000000000    // cd
    0000000000000000000000000000000000000000000000000000000000000002    // 길이 두 자리
    6566000000000000000000000000000000000000000000000000000000000000    // ef

    ["abc","def","ghi","jkl"] 결과 값
    0x
    0000000000000000000000000000000000000000000000000000000000000020
    0000000000000000000000000000000000000000000000000000000000000004    // aray 길이
    0000000000000000000000000000000000000000000000000000000000000080
    00000000000000000000000000000000000000000000000000000000000000c0
    0000000000000000000000000000000000000000000000000000000000000100
    0000000000000000000000000000000000000000000000000000000000000140

    0000000000000000000000000000000000000000000000000000000000000003    // 길이 세 자리
    6162630000000000000000000000000000000000000000000000000000000000    // abc
    0000000000000000000000000000000000000000000000000000000000000003    // 길이 세 자리
    6465660000000000000000000000000000000000000000000000000000000000    // def
    0000000000000000000000000000000000000000000000000000000000000003    // 길이 세 자리
    6768690000000000000000000000000000000000000000000000000000000000    // ghi
    0000000000000000000000000000000000000000000000000000000000000003    // 길이 세 자리
    6a6b6c0000000000000000000000000000000000000000000000000000000000    // jkl

    ["a","b","c","d","e"] 결과 값
    0x
    0000000000000000000000000000000000000000000000000000000000000020
    0000000000000000000000000000000000000000000000000000000000000005
    00000000000000000000000000000000000000000000000000000000000000a0    // 16진수 a0 => 10진수 160 (64 씩 차이남. 32byte)
    00000000000000000000000000000000000000000000000000000000000000e0    // 16진수 e0 => 10진수 224
    0000000000000000000000000000000000000000000000000000000000000120    // 16진수 120 => 10진수 288
    0000000000000000000000000000000000000000000000000000000000000160    // 16진수 160 => 10진수 352
    00000000000000000000000000000000000000000000000000000000000001a0    // 16진수 1a0 => 10진수 416

    0000000000000000000000000000000000000000000000000000000000000001
    6100000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000001
    6200000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000001
    6300000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000001
    6400000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000001
    6500000000000000000000000000000000000000000000000000000000000000

    */


    /*
    function getABIEncodePacked_s(string[] memory _s) public pure returns(bytes memory) {
        return abi.encodePacked(_s);
    }
    
        from solidity:
        TypeError: Type not supported in packed mode.
        --> abi/abi.sol:91:33:
        |
        91 |         return abi.encodePacked(_s);
        |                                 ^^
    */
}

contract ABI3 {
    struct A {
        uint a;
        string b;
    }

    struct B {
        uint a;
        string b;
        bool c;
    }

    struct B_2 {
        uint a;
        bool c;
        string b;
    }

    struct B_3 {
        bool c;
        uint a;
        string b;
    }

    struct C {
        bool c;
        uint d;
        uint a;
        string b;
    }

    struct D {
        bool c;
        uint d;
        string a;
        string b;
    }

    struct E {
        uint d;
        string a;
        string b;
        string c;
    }

    struct F {
        uint a;
        uint[] _n;
        string b;
        string c;
        string[] d;
    }

    struct G {
        uint a;
        uint[] _n;
        string b;
        string c;
        string[] d;
        bytes1[] e;
    }

    function getABIEncode(A memory a) public pure returns(bytes memory) {
        return abi.encode(a);
    }
    /*
    [1, abc] 결과 값
    0x
    0000000000000000000000000000000000000000000000000000000000000020    // struct 정보
    0000000000000000000000000000000000000000000000000000000000000001    // 1
    0000000000000000000000000000000000000000000000000000000000000040
    0000000000000000000000000000000000000000000000000000000000000003    // 길이 3
    6162630000000000000000000000000000000000000000000000000000000000    // abc
    */

    function getABIEncode2(B memory b) public pure returns(bytes memory) {
        return abi.encode(b);
    }
    /*
    [1, abcde, true] 결과 값
    0x
    0000000000000000000000000000000000000000000000000000000000000020
    0000000000000000000000000000000000000000000000000000000000000001
    0000000000000000000000000000000000000000000000000000000000000060
    0000000000000000000000000000000000000000000000000000000000000001    // true
    0000000000000000000000000000000000000000000000000000000000000005    // 길이 5
    6162636465000000000000000000000000000000000000000000000000000000

    [1, abcde, false] 결과 값
    0x
    0000000000000000000000000000000000000000000000000000000000000020
    0000000000000000000000000000000000000000000000000000000000000001
    0000000000000000000000000000000000000000000000000000000000000060
    0000000000000000000000000000000000000000000000000000000000000000    // false (false를 마지막 값에 넣었는데 먼저 나오네?)
    0000000000000000000000000000000000000000000000000000000000000005
    6162636465000000000000000000000000000000000000000000000000000000
    */

    function getABIEncode2_2(B_2 memory b) public pure returns(bytes memory) {
        return abi.encode(b);
    }
    /*
    [10, true, abc] 결과 값
    0x
    0000000000000000000000000000000000000000000000000000000000000020
    000000000000000000000000000000000000000000000000000000000000000a
    0000000000000000000000000000000000000000000000000000000000000001
    0000000000000000000000000000000000000000000000000000000000000060
    0000000000000000000000000000000000000000000000000000000000000003
    6162630000000000000000000000000000000000000000000000000000000000
    */

    function getABIEncode2_3(B_3 memory b) public pure returns(bytes memory) {
        return abi.encode(b);
    }
    /*
    [false, 10, abc] 결과 값
    0x
    0000000000000000000000000000000000000000000000000000000000000020
    0000000000000000000000000000000000000000000000000000000000000000    // false
    000000000000000000000000000000000000000000000000000000000000000a    // 10
    0000000000000000000000000000000000000000000000000000000000000060
    0000000000000000000000000000000000000000000000000000000000000003
    6162630000000000000000000000000000000000000000000000000000000000
    */

    function getABIEncode3(C memory c) public pure returns(bytes memory) {
        return abi.encode(c);
    }
    /*
    [false, 16, 32, abc] 결과 값
    0x
    0000000000000000000000000000000000000000000000000000000000000020
    0000000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000010
    0000000000000000000000000000000000000000000000000000000000000020
    0000000000000000000000000000000000000000000000000000000000000080
    0000000000000000000000000000000000000000000000000000000000000003
    6162630000000000000000000000000000000000000000000000000000000000
    */

    function getABIEncode4(D memory d) public pure returns(bytes memory) {
        return abi.encode(d);
    }
    /*
    [false, 160, abc, def] 결과 값 
    0x
    0000000000000000000000000000000000000000000000000000000000000020
    0000000000000000000000000000000000000000000000000000000000000000
    00000000000000000000000000000000000000000000000000000000000000a0
    0000000000000000000000000000000000000000000000000000000000000080
    00000000000000000000000000000000000000000000000000000000000000c0
    0000000000000000000000000000000000000000000000000000000000000003
    6162630000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000003
    6465660000000000000000000000000000000000000000000000000000000000
    */

    function getABIEncode5(E memory e) public pure returns(bytes memory) {
        return abi.encode(e);
    }
    /*
    [32, ab, cd, ef] 결과 값
    0x
    0000000000000000000000000000000000000000000000000000000000000020
    0000000000000000000000000000000000000000000000000000000000000020
    0000000000000000000000000000000000000000000000000000000000000080
    00000000000000000000000000000000000000000000000000000000000000c0
    0000000000000000000000000000000000000000000000000000000000000100

    0000000000000000000000000000000000000000000000000000000000000002
    6162000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000002
    6364000000000000000000000000000000000000000000000000000000000000
    0000000000000000000000000000000000000000000000000000000000000002
    6566000000000000000000000000000000000000000000000000000000000000
    */

    function getABIEncode6(F memory f) public pure returns(bytes memory) {
        return abi.encode(f);
    }
    /*
    [32, [1,2,3], ab, cd, [a,b,c,d,e]] 결과 값
    0x
    0000000000000000000000000000000000000000000000000000000000000020    // struct 온다.
    0000000000000000000000000000000000000000000000000000000000000020    // 32

    00000000000000000000000000000000000000000000000000000000000000a0    // [1,2,3] : offset
    0000000000000000000000000000000000000000000000000000000000000120    // ab : offset
    0000000000000000000000000000000000000000000000000000000000000160    // cd : offset
    00000000000000000000000000000000000000000000000000000000000001a0    // [a,b,c,d,e] : offset (배열 자체가 어디 있는지)

    0000000000000000000000000000000000000000000000000000000000000003    // [1,2,3] 길이 => 3
    0000000000000000000000000000000000000000000000000000000000000001    // 1
    0000000000000000000000000000000000000000000000000000000000000002    // 2
    0000000000000000000000000000000000000000000000000000000000000003    // 3

    0000000000000000000000000000000000000000000000000000000000000002    // ab 길이
    6162000000000000000000000000000000000000000000000000000000000000    // ab
    0000000000000000000000000000000000000000000000000000000000000002    // cd 길이
    6364000000000000000000000000000000000000000000000000000000000000    // cd

    0000000000000000000000000000000000000000000000000000000000000005    // [a,b,c,d,e] 길이 => 5
    00000000000000000000000000000000000000000000000000000000000000a0    // a : offset
    00000000000000000000000000000000000000000000000000000000000000e0    // b : offset
    0000000000000000000000000000000000000000000000000000000000000120    // c : offset
    0000000000000000000000000000000000000000000000000000000000000160    // d : offset
    00000000000000000000000000000000000000000000000000000000000001a0    // e : offset
    
    0000000000000000000000000000000000000000000000000000000000000001    // a 길이 1
    6100000000000000000000000000000000000000000000000000000000000000    // a
    0000000000000000000000000000000000000000000000000000000000000001    // b 길이 1
    6200000000000000000000000000000000000000000000000000000000000000    // b
    0000000000000000000000000000000000000000000000000000000000000001    // c 길이 1
    6300000000000000000000000000000000000000000000000000000000000000    // c
    0000000000000000000000000000000000000000000000000000000000000001    // d 길이 1
    6400000000000000000000000000000000000000000000000000000000000000    // d
    0000000000000000000000000000000000000000000000000000000000000001    // e 길이 1
    6500000000000000000000000000000000000000000000000000000000000000    // e
    */

    function getABIEncode7(G memory g) public pure returns(bytes memory) {
        return abi.encode(g);
    }
    /*
    [128, [1,2,3,4,5], ab,cde,[a,bc,edf],[0x12,0x34,0x56,0x78,0x9a]] 결과 값
    0x
    0000000000000000000000000000000000000000000000000000000000000020    
    0000000000000000000000000000000000000000000000000000000000000080    // 128
    00000000000000000000000000000000000000000000000000000000000000c0    // [1,2,3,4,5] offset
    0000000000000000000000000000000000000000000000000000000000000180    // ab offset
    00000000000000000000000000000000000000000000000000000000000001c0    // cde offset
    0000000000000000000000000000000000000000000000000000000000000200    // [a, bc, def] offset
    0000000000000000000000000000000000000000000000000000000000000340    // [0x12, 0x34, 0x56, 0x78, 0x9a] offset

    0000000000000000000000000000000000000000000000000000000000000005    // [1,2,3,4,5] length
    0000000000000000000000000000000000000000000000000000000000000001    // 1
    0000000000000000000000000000000000000000000000000000000000000002    // 2
    0000000000000000000000000000000000000000000000000000000000000003    // 3
    0000000000000000000000000000000000000000000000000000000000000004    // 4
    0000000000000000000000000000000000000000000000000000000000000005    // 5

    0000000000000000000000000000000000000000000000000000000000000002    // ab length
    6162000000000000000000000000000000000000000000000000000000000000    // ab
    0000000000000000000000000000000000000000000000000000000000000003    // cde length
    6364650000000000000000000000000000000000000000000000000000000000    // cde

    0000000000000000000000000000000000000000000000000000000000000003    // [a, bc, def] length
    0000000000000000000000000000000000000000000000000000000000000060    // a offset
    00000000000000000000000000000000000000000000000000000000000000a0    // bc offset
    00000000000000000000000000000000000000000000000000000000000000e0    // def offset

    0000000000000000000000000000000000000000000000000000000000000001    // a length
    6100000000000000000000000000000000000000000000000000000000000000    // a
    0000000000000000000000000000000000000000000000000000000000000002    // bc length
    6263000000000000000000000000000000000000000000000000000000000000    // bc
    0000000000000000000000000000000000000000000000000000000000000003    // def length
    6564660000000000000000000000000000000000000000000000000000000000    // def
    
    0000000000000000000000000000000000000000000000000000000000000005    // [[0x12, 0x34, 0x56, 0x78, 0x9a] length
    1200000000000000000000000000000000000000000000000000000000000000    // 0x12
    3400000000000000000000000000000000000000000000000000000000000000    // 0x34
    5600000000000000000000000000000000000000000000000000000000000000    // 0x56
    7800000000000000000000000000000000000000000000000000000000000000    // 0x78
    9a00000000000000000000000000000000000000000000000000000000000000    // 0x9a
    */

}

contract ABI4 {
    // mapping은 encode가 안 됨. 머클패트리샤 트라이를 표현하는 방법 x.
    mapping(uint => string) aaa;

    /*
    function getABIEncode(aaa memory) public view returns(bytes memory) {
        return abi.encode(aaa);
    }

        from solidity:
        TypeError: Name has to refer to a user-defined type.
        --> abi/abi.sol:343:27:
            |
        343 |     function getABIEncode(aaa memory) public view returns(bytes memory) {
            |                           ^^^

    */
}